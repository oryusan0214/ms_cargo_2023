#line 1 "C:\\WORK\\学校\\未来創造展\\ms_project\\ms_project\\time.cpp"
/* -------------------------------------------------------------------------- */
/* msTime.cpp																                                  */
/* ログに関する処理を纏めています。											                      */
/* 時間に関する管理を纏めた関数郡です。										                    */
/* システム経過時刻、タイマーコールバック等を制御・管理します。				        */
/* ##Windowsで動く様に設計されています。##部分をAruduino様に変えれば動きます  */
/* -------------------------------------------------------------------------- */
/* ## Main側でmsTimeInitをコールし、タイマ関連を初期化済					            */
/*    使い方																                                  */
/*    ①タイマーセットしたい時                                                */
/*      msSetTimerをコールし、必要な引数を設定。するとIDが貰える（要保管）	  */
/*      ①のセット時間が経過すると、①のコールバック関数が呼ばれる。		      */
/*      関数の受け口（実体）を書いておく事。								                  */
/*    ②タイマーを削除したい時											                           */
/*      msTimeKillをコールすると、登録されたタイマーコールバックが解除される。*/
/* -------------------------------------------------------------------------- */
/* 番号		更新履歴								日付		氏名		                            */
/* -------------------------------------------------------------------------- */
/* 000000	新規作成								2013/05/08	桝井　隆治	                    */
/* 000001	Arduino版に改修					2023/12/04  山田　龍之介		 					      */
/* -------------------------------------------------------------------------- */
#define _CRT_SECURE_NO_WARNINGS

/* -------------------------------------------------------------------------- */
/* includeファイル															                              */
/* -------------------------------------------------------------------------- */

#include "time.h"								  /* 時間に関するヘッダ		  */

/* -------------------------------------------------------------------------- */
/* プロトタイプ宣言															                              */
/* -------------------------------------------------------------------------- */
/* ## タイマーコールバック関数→Aruduinoの1msタイマ割り込みに変更			       */
void  msTimerCallback();

/* -------------------------------------------------------------------------- */
/* グローバル変数宣言														  */
/* -------------------------------------------------------------------------- */
volatile unsigned long timerCount = 0;
ULNG g_SystemTime = 0;							/* システム起動時間( ms単位 ) */
UINT g_TimerID    = 0;							/* システムタイマーID		  */

MS_TIMER_CALLBACK_TBL g_CallbackTbl[MS_TIME_NUM_MAX];	/* コールバック管理TBL*/


/* -------------------------------------------------------------------------- */
/* 関数名		：msSetTimer												                              */
/* 機能名		：タイマーコールバック設定									                      */
/* 機能概要	：タイマーコールバックの設定を行います。設定完了後、		          */
/*				  ：指定時間毎にコールバック関数をコールします。				            */
/*				  ：止める場合は必ずmsKillTimerをコールして下さい。			            */
/* 引数			：ULNG			 ：CallbackTime：[I N]タイマー満了時間(1以上)         */
/* 				  ：void*			 ：object	         ：[I N]コールバック引数(NULL可)    */
/* 				  ：void (*Callback)( void* )	   ：[I N]コールバック関数		        */
/* 戻り値		：SLNG			 ：0以外	         ：タイマーＩＤ				              */
/* 				  ：				   ：0		           ：システムエラー				            */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* 作成日		：2023/12/06	山田　龍之介	Arduino版に改修					              */
/* -------------------------------------------------------------------------- */
SLNG msSetTimer( ULNG CallBackTime, void* Object, void (*Callback)(void* objectt ))
{
	ULNG ulCounter = 0;							/* ループカウンタ			  */
	
	/* 引数チェック(OnjectはNULLを許可する)---------------------------------- */
	if(( CallBackTime == 0 ) || ( Callback == NULL )) {
		msLog( "引数エラー８" );
		return MS_TIME_PARAM;
	}
	
	/* タイマー上限チェック ------------------------------------------------- */
	for( ulCounter = 0; ulCounter < MS_TIME_NUM_MAX; ulCounter ++ ) {
		//msLog("--- cnt ---");
		//msLog(ulCounter);
		if( g_CallbackTbl[ulCounter].Callback == NULL ) {
			break;
		}
	}
	if( ulCounter >= MS_TIME_NUM_MAX ) {
		msLog( "タイマー上限エラー" );
		return MS_TIME_FULL;
	}
	
	/* コールバック情報格納 ------------------------------------------------- */
	g_CallbackTbl[ulCounter].CallbackTime = CallBackTime;
	g_CallbackTbl[ulCounter].TimerCounter = 0;
	g_CallbackTbl[ulCounter].object       = Object;
	g_CallbackTbl[ulCounter].Callback     = Callback;
	g_CallbackTbl[ulCounter].TimerID      = ++g_TimerID;
	
	return g_TimerID;
}


/* -------------------------------------------------------------------------- */
/* 関数名		：msTimeInit												                              */
/* 機能名		：時間管理情報初期化										                          */
/* 機能概要	：時間計測に関する情報を初期化します。						                */
/*				  ：システム起動時には必ず本関数をコールすること。			            */
/* 引数			：void			 ：無し										                            */
/* 戻り値		：void			 ：無し										                            */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* 作成日		：2023/12/06	山田　龍之介	Arduino版に改修					              */
/* -------------------------------------------------------------------------- */
void msTimeInit( void )
{
	/* 起動時間初期化 */
	g_SystemTime = 0;
	
	/* タイマーID初期化 */
	g_TimerID    = 0;
	
	/* コールバック管理テーブル初期化 */
	memset( &g_CallbackTbl[0], 0, sizeof( g_CallbackTbl ));
	
	/* タイマー開始 */
	/* ##Aruduinoのタイマレジスタを設定する様に置き換え。1msでセット */
	Timer1.initialize(1000);
  	Timer1.attachInterrupt(msTimerCallback);
  	Timer1.start();
	return;
}

/* -------------------------------------------------------------------------- */
/* 関数名		：msTimeExit												                              */
/* 機能名		：時間管理情報破棄											                          */
/* 機能概要	：時間計測に関する情報を廃棄します。						                  */
/*				  ：システム終了時には必ず本関数をコールすること。			            */
/* 引数			：void			 ：無し										                            */
/* 戻り値		：void			 ：無し										                            */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* 作成日		：2023/12/06	山田　龍之介	Arduino版に改修					              */
/* -------------------------------------------------------------------------- */
void msTimeExit( void )
{
	/* ##Aruduinoでタイマー割り込みのセットを解除すればOK */
  	Timer1.stop();
	/* 電源入れっぱなしであれば本関数はコール不要。 */
	//KillTimer( NULL, g_WinTimerID );
	return;
}

/* -------------------------------------------------------------------------- */
/* 関数名		：msTimeKill												                              */
/* 機能名		：タイマーコールバック情報破棄								                    */
/* 機能概要	：登録していたタイマーコールバックを消去します。			            */
/* 引数			：SLNG			 ：TimerID		  ：[I N]削除するタイマーID	            */
/* 戻り値		：SLNG			 ：MS_TIME_OK	  ：正常終了					                  */
/* 				  ：				   ：MS_TIME_PARAM：パラメータエラー			              */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* -------------------------------------------------------------------------- */
SLNG msTimeKill( SLNG TimerID )
{
	SLNG slCounter = 0;
	
	/* タイマーIDをベースにコールバックテーブルを検索 ----------------------- */
	for( slCounter = 0; slCounter < MS_TIME_NUM_MAX; slCounter ++ ) {
		if( g_CallbackTbl[slCounter].TimerID == TimerID ) {
			/* 該当タイマーを削除  */
			memset( &g_CallbackTbl[slCounter], 0, sizeof( MS_TIMER_CALLBACK_TBL ));
			break;
		}
	}
	
	/* タイマーIDが存在するかチェック --------------------------------------- */
	if( slCounter >= MS_TIME_NUM_MAX ) {
		msLog( "タイマーIDが存在しない" );
		return MS_TIME_PARAM;
	}
	return MS_TIME_OK;
}


/* -------------------------------------------------------------------------- */
/* 関数名		：msGetSystemTime											                            */
/* 機能名		：システム経過時間の取得									                        */
/* 機能概要	：システム起動時から現在までの経過時間をミリ秒単位で返します。    */
/* 注意事項 ：割り込み禁止のフラグをオンにしてるので割り込み解除を忘れずに    */
/* 引数			：void			 ：無し										                            */
/* 戻り値		：ULNG			 ：システム経過時間							                      */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* -------------------------------------------------------------------------- */
ULNG msTimeGetSystemTime( void )
{
	/* T.B.D. 排他制御・割り込み禁止を忘れないこと。*/
  noInterrupts();
	return g_SystemTime;
}


/* -------------------------------------------------------------------------- */
/* 関数名		：msTimerCallback											                            */
/* 機能名		：タイマーコールバック										                        */
/* 機能概要	：1ms周期のコールバックです。								                      */
/* 引数			：void			 ：無し										                            */
/* 戻り値		：SCHR			 ：MS_LOG_INIT_FLG_ON	：初期化済み		                */
/*				  ：				   ：MS_LOG_INIT_FLG_OFF：未初期化			                */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* -------------------------------------------------------------------------- */
/* ##Aruduinoのタイマ割り込み関数に変更、ロジック変更は不要 */
void msTimerCallback( )
{
	ULNG ulCounter             = 0;				  /* ループカウンタ			        */
	MS_TIMER_CALLBACK_TBL* ptr = NULL;			/* コールバックテーブル検索用 */
	
	/* システムカウンタインクリメント */
	g_SystemTime ++;
	ptr = &g_CallbackTbl[0];
	
	/* テーブルに登録されているコールバックカウンタをインクリメント			  */
	for( ulCounter = 0; ulCounter < MS_TIME_NUM_MAX; ulCounter ++, ptr ++ ) {
		if( ptr->CallbackTime != 0 ) {
			ptr->TimerCounter ++;
		}
	}
	return;
}


/* -------------------------------------------------------------------------- */
/* 関数名		：msTimeCallbackExecute										                        */
/* 機能名		：タイマーコールバック発行									                      */
/* 機能概要		：コールバック可能な関数を検索し、順次を実行します。		        */
/* 				：優先度を付ける必要がある場合は、ここでソート処理を行うこと。      */
/* 引数			：void			 ：無し										                            */
/* 戻り値		：void			 ：無し										                            */
/* 作成日		：2013/03/12	桝井　隆治		新規作成					                    */
/* -------------------------------------------------------------------------- */
void msTimeCallbackExecute( void )
{
	ULNG ulCounter             = 0;				/* ループカウンタ			  */
	MS_TIMER_CALLBACK_TBL* ptr = NULL;			/* コールバックテーブル検索用 */
	
	ptr = &g_CallbackTbl[0];
	
	/* テーブルに登録されているコールバックカウンタをインクリメント			  */
	for( ulCounter = 0; ulCounter < MS_TIME_NUM_MAX; ulCounter ++, ptr ++ ) {
		/* コールバック関数が登録されているか */
		if( ptr->CallbackTime != 0 ) {
			/* 上記且つタイマーが満了しているか */
			if( ptr->TimerCounter >= ptr->CallbackTime ) {
				/* コールバック関数呼び出し */
				//msLog("--- callback start ---");
				ptr->Callback( ptr->object );
				ptr->TimerCounter = 0;
			}
		}
	}
	return;
}


/* -------------------------------------------------------------------------- */
/* 				Copyright HAL College of Technology & Design				  */
/* -------------------------------------------------------------------------- */
